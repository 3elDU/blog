{% extends "homepage/dialogs/base.njk" %}

{% block title %}
More about frontend
{% endblock title %}

{% block body %}
<blockquote>
  Stuff listed here does not necessarily correspond to what I'm using now.
  As of September 2025, I'm mostly working with vanilla JavaScript
</blockquote>
<h2>Tailwind</h2>
<p>
  I used Tailwind a lot when I started rolling into webdev in early 2023, but as I progressed I started to dislike it
  more and more.
  Writing regular CSS is just easier, as it does not require an additional build step, is more maintenable and easier
  to
  read.
  Tailwind creates specificity problems that CSS has already solves, often requiring you to prefix classes with
  <b>!</b> to make them <b>!important</b>
</p>
<h2>Vue</h2>
<p>
  When I started webdev, I chose Vue (Vue 3 had just released at that time), and it has been my go-to framework ever
  since.
  Although I mostly write vanilla js now, I would enjoy building a large application with Vue.
  It has a large ecosystem of everything you would need, and it feels simple, which is a big compliment.
</p>
<h2>Nuxt</h2>
<p>
  A bunch of applications I've made with Vue actually used Nuxt. It's a valid option that has all the batteries
  included
  with
  built-in server rendering, backend logic and other niceties. It can be a bit heavy for a simple project, but
  ultimately
  it has proven itself useful.
</p>
<h2>Electron</h2>
<p>
  Love it or hate it, that's what 90% of modern apps use. Websites have long ago grown to full-scale apps with complex
  logic,
  and Electron is simply the next step, that allows those apps to be truly "native". By native, of course, I do not
  mean
  using native UI components, but rather integrating more deeply into the operating system, beyond what browser
  allows
  <a href="https://github.com/3elDU/spdl" target="_blank">SPDL</a> uses electron.
</p>
<h2>React</h2>
<p>Actually, React was my first JS "framework", back in 2022. I didn't build anything serious with it, but I've
  learned
  the basics. There is a lot of hate towards React nowadays and it's easy to understand why. Folks from Facebook found
  a
  decent rendering technique with functional components making UI a function of state. While the idea is powerful, the
  execution is not among the best. React is
  <a href="https://krausest.github.io/js-framework-benchmark/" target="_blank">among the slowest</a> thanks to it's
  virtual DOM and the
  fact that it also wraps all events inside that virtual dom.
</p>
{% endblock body %}